#######################################################
# 
# Biglietto.py
# Python implementation of the Class Biglietto
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:58
# Original author: ValerioMorelli
# 
#######################################################
from datetime import datetime

from backend.high_level.clientela.abbonamento import Abbonamento
from backend.high_level.clientela.documento import Documento
from backend.high_level.clientela.enum.tariffa import Tariffa
from backend.high_level.gestione_interna.enum.reparto_museo import RepartoMuseo
from backend.high_level.gestione_interna.turno_guida import TurnoGuida
from backend.low_level.pagamenti.nexi_api import NexiApi


class Biglietto(Documento):
    def __init__(self, dataRilascio: datetime = None, reparto: RepartoMuseo = RepartoMuseo.MUSEO_APERTO,
                 tariffa: Tariffa = Tariffa.INTERO, turno: TurnoGuida = None):
        super().__init__(NexiApi(), dataRilascio)
        self._reparto_museo = reparto
        self._tariffa = tariffa
        self._guida = turno
        self._abbonamento: Abbonamento | None = None

    @property
    def abbonamento(self):
        return self._abbonamento

    @abbonamento.setter
    def abbonamento(self, value: Abbonamento):
        if value is not None:
            if not value.isScaduto():
                self._abbonamento = value
                self._tariffa = Tariffa.GRATIS
            self.notify()

    @property
    def tariffa(self):
        return self._tariffa

    @tariffa.setter
    def tariffa(self, value: Tariffa):
        if value is not None and self._abbonamento is None:
            self._tariffa = value
            self.notify()

    @property
    def reparto(self):
        return self._reparto_museo

    @reparto.setter
    def reparto(self, value: RepartoMuseo):
        if value is not None:
            self._reparto_museo = value
            self.notify()

    @property
    def guida(self):
        return self._guida

    @guida.setter
    def guida(self, value: TurnoGuida):
        if value is not None:
            self._guida = value
            self.notify()

    def calcolaCosto(self) -> float:
        if self._tariffa == Tariffa.GRATIS:
            return 0.00
        elif self._reparto_museo == RepartoMuseo.MUSEO_APERTO:
            return 5.00 if self.__hasGuida() else 0.00
        else:
            return self.tariffa.cost + (5.00 if self.__hasGuida() else 0.00)

    def convalida(self) -> bool:
        self.date_convalida.append(datetime.now())
        return self.pagato and (datetime.now() - self.data_rilascio).total_seconds() < 3600 * 24

    def isScaduto(self) -> bool:
        return (datetime.now() - self.data_rilascio).total_seconds() < 3600 * 24

    def __hasGuida(self) -> bool:
        return self.guida is not None
