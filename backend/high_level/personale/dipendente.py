#######################################################
# 
# Dipendente.py
# Python implementation of the Class Dipendente
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
# 
#######################################################
from datetime import datetime

from backend.high_level.clientela.enum.sesso import Sesso
from backend.high_level.personale.credenziale import Credenziale
from backend.high_level.personale.posto_lavoro import PostoLavoro


class Dipendente():

    def __init__(self, nome: str, cognome: str, dataNascita: datetime, email: str = 'dipendente@museo.omero.it',
                 sesso: Sesso = Sesso.NON_SPECIFICATO, curriculum: str = '',
                 credenziale: Credenziale = None, lavoro: 'Lavoro' = None,
                 postoLavoro: PostoLavoro | None = None, autogenerato: bool = False):
        self.nome = nome
        self.cognome = cognome
        self.data_nascita = dataNascita
        self.email = email
        self.sesso = sesso
        self.curriculum = curriculum
        self.credenziale = Credenziale(nome + cognome) if credenziale == None else credenziale
        self.lavoro = lavoro
        self.posto_lavoro = postoLavoro
        self.autogenerato = autogenerato
        self.lavori_passati: list['Lavoro'] = []
        self.data_registrazione = datetime.now()

    def assumi(self, lavoro: 'Lavoro',posto_lavoro:'PostoLavoro') -> bool:
        from backend.high_level.personale.operatore_al_pubblico import OperatoreAlPubblico
        from backend.high_level.personale.reception import Reception
        from backend.high_level.personale.amministrazione import Amministrazione
        from backend.high_level.personale.amministratore import Amministratore
        from backend.high_level.personale.segretario import Segretario
        from backend.high_level.personale.segreteria import Segreteria

        if self.lavoro is None:
            matches={
                OperatoreAlPubblico:Reception,
                Segretario:Segreteria,
                Amministratore:Amministrazione,
            }
            if not type(posto_lavoro) is  matches[type(lavoro)]:
                raise Exception('Non posso assumere un {} in una {}!'.format(lavoro.__class__.__name__ ,
                                                                             posto_lavoro.__class__.__name__))

            self.posto_lavoro = posto_lavoro
            posto_lavoro.lavori.append(lavoro)

            lavoro.dipendente = self
            self.lavoro = lavoro
            return True
        raise Exception('non posso assumere un dipendente che ha giÃ  un lavoro, prima devi licenziarlo!')

    def licenzia(self, notaLicenziamento: str) -> bool:
        if self.lavoro is not None:
            self.posto_lavoro = None
            self.lavoro.licenzia(notaLicenziamento)
            self.lavori_passati.append(self.lavoro)
            self.lavoro = None
            return True
        raise Exception('Non posso licenziare un dipendente che non ha un lavoro, prima devi assumerlo!')

    def autentifica(self, username: str, password: str) -> bool:
        if self.credenziale is not None:
            return self.credenziale.username == username and self.credenziale.verifica(password)
        return False

    def calcolaEta(self) -> int:
        return datetime.today().year - self.data_nascita.year - \
               ((datetime.today().month, datetime.today().day) < (self.data_nascita.month, self.data_nascita.day))

    def isDisoccupato(self)->bool:
        return self.lavoro is None
