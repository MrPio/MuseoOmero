#######################################################
# 
# ControllerConvalida.py
# Python implementation of the Class ControllerConvalida
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:58
# Original author: ValerioMorelli
# 
#######################################################

from backend.high_level.clientela.qr_code import QRCode
from backend.high_level.museo import Museo
from frontend.controller.controller import Controller
from frontend.controller.segreteria.controller_inserimento_manuale import ControllerInserimentoManuale
from frontend.controller.segreteria.strategy_convalida.strategy_convalida import StrategyConvalida
from frontend.view.segreteria.vista_convalida import VistaConvalida
from frontend.view.segreteria.vista_inserimento_manuale import VistaInserimentoManuale


class ControllerConvalida(Controller):

    def __gotoPrevious(self) -> None:
        self.closeView()
        self.previous.initializeUi()
        self.previous.enableView()

    def __init__(self, view: VistaConvalida, previous: Controller, strategy: StrategyConvalida):
        super().__init__(view)
        self.view: VistaConvalida = view
        self.previous: Controller = previous
        self.strategy: StrategyConvalida = strategy
        self.next = None

    def __gotoVistaInserimentoManuale(self) -> None:
        self.next = ControllerInserimentoManuale(
            view=VistaInserimentoManuale(),
            model=Museo.getInstance(),
            previous=self,
            strategy=self.strategy,
        )
        self.next.showView()
        self.disableView()

    def __onScannerizzaClicked(self) -> None:
        id = QRCode.scannerizza_da_webcam()

        if id == '':
            self.notifica('Operazione Annullata', 'Hai annullato il processo di scannerizzazione del qr-code')
            return

        self.strategy.finalizza(self, id)

    def connettiEventi(self) -> None:
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.__gotoPrevious()
        self.view.getInserisciManualmenteButton().mouseReleaseEvent = lambda _: self.__gotoVistaInserimentoManuale()
        self.view.getScannerizzaButton().mouseReleaseEvent = lambda _: self.__onScannerizzaClicked()

    def initializeUi(self) -> None:
        self.strategy.initializeUi(self)
        # TODO

    # def finalizza(self, abbonamento: 'Abbonamento') -> None:
    #     self.strategy.abbonamento = abbonamento
    #     self.strategy.finalizza(self)
    #     self.closeView()
    #     self.previous.enableView()
