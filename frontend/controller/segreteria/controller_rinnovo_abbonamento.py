#######################################################
#
# ControllerRinnovoAbbonamento.py
# Python implementation of the Class ControllerRinnovoAbbonamento
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
#
#######################################################
from PyQt5.QtGui import QImage, QPixmap

from backend.high_level.clientela.abbonamento import Abbonamento
from backend.high_level.clientela.enum.tipo_abbonamento import TipoAbbonamento
from frontend.controller.controller import Controller
from frontend.controller.segreteria.controller_convalida import ControllerConvalida
from frontend.controller.segreteria.controller_vista_abbonamento import ControllerVistaAbbonamento
from frontend.controller.segreteria.strategy_convalida.strategy_ricerca_abbonamento import StrategyRicercaAbbonamento
from frontend.view.segreteria.vista_abbonamento import VistaAbbonamento
from frontend.view.segreteria.vista_convalida import VistaConvalida
from frontend.view.segreteria.vista_rinnovo_abbonamento import VistaRinnovoAbbonamento


class ControllerRinnovoAbbonamento(Controller):

    def __gotoPrevious(self) -> None:
        self.closeView()
        self.previous.initializeUi()
        self.previous.enableView()

    def __init__(self, view: VistaRinnovoAbbonamento, previous: Controller, model: Abbonamento | None):
        super().__init__(view)
        self.view: VistaRinnovoAbbonamento = view
        self.previous = previous
        self.model = model
        self.hideView()
        self.__gotoVistaConvalida()
        self.connettiEventi()
        # self.showView()
        # self.initializeUi()

    def __onConfermaClicked(self) -> None:
        tipo = TipoAbbonamento[self.view.getDurataComboBox().currentText().upper()]
        self.model.rinnova(tipo)
        self.notifica('Abbonamento Rinnovato', f'L\'abbonamento è ora valido per i prossimi {tipo.days} giorni')
        self.closeView()
        self.previous.enableView()

    def __gotoVistaConvalida(self) -> None:
        self.next = ControllerConvalida(
            view=VistaConvalida(),
            previous=self,
            strategy=StrategyRicercaAbbonamento(),
        )

    def __gotoVistaAbbonamento(self) -> None:
        self.next = ControllerVistaAbbonamento(
            view=VistaAbbonamento(),
            previous=self,
            model=self.model,
        )

    def __onDurataChanged(self) -> None:
        """
        Si è scelto di non utilizzare il pattern of observer perché comporterebbe la modifica
        dell'attributo 'tipo' dell'abbonamento anche se poi l'operazione può essere annullata
        """
        self.view.getImportoTotaleLabel().setText(
            '€ ' + str(TipoAbbonamento[self.view.getDurataComboBox().currentText().upper()].cost))

    def connettiEventi(self) -> None:
        super().connettiEventi()
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.__gotoPrevious()
        self.view.getConfermaButton().clicked.connect(self.__onConfermaClicked)
        self.view.getDurataComboBox().currentTextChanged.connect(self.__onDurataChanged)
        self.view.getQrCodeImage().mouseReleaseEvent = lambda _: self.__gotoVistaAbbonamento()

    def initializeUi(self) -> None:
        if self.model is None:
            self.__gotoPrevious()
            return
        i = self.model.qr_code.getImage()
        i = i.convert("RGBA")
        image = QImage(i.tobytes('raw', 'RGBA'), i.size[0],
                       i.size[1], QImage.Format_RGBA8888)
        self.view.getQrCodeImage().setPixmap(QPixmap.fromImage(image))
        self.view.getQrCodeImage().setMargin(17)
