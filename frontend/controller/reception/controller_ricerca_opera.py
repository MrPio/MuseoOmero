#######################################################
# 
# ControllerRicercaOpera.py
# Python implementation of the Class ControllerRicercaOpera
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
# 
#######################################################
from backend.high_level.museo import Museo
from frontend.controller.controller import Controller
from frontend.controller.reception.controller_vista_opera import ControllerVistaOpera
from frontend.controller.reception.strategy_ricerca_opera.strategy_ricerca_opera import StrategyRicercaOpera
from frontend.controller.reception.widget.controller_widget_opera import ControllerWidgetOpera
from frontend.view.reception.vista_opera import VistaOpera
from frontend.view.reception.vista_ricerca_opera import VistaRicercaOpera
from frontend.view.reception.widget.widget_opera import WidgetOpera


class ControllerRicercaOpera(Controller):

    def __gotoPrevious(self) -> None:
        self.closeView()
        self.previous.enableView()

    def __init__(self, view: VistaRicercaOpera, previous: Controller, model: Museo, strategy: StrategyRicercaOpera):
        super().__init__(view)
        self.view: VistaRicercaOpera = view
        self.previous = previous
        self.model = model
        self.strategy: StrategyRicercaOpera = strategy
        self.opere_trovate: list[ControllerWidgetOpera] = []

    def __onRicercaClicked(self) -> None:
        self.initializeUi()

    # def __gotoVistaOpera(self) -> None:
    #     self.next = ControllerVistaOpera(
    #         view=VistaOpera(),
    #         previous=self,
    #         model=Museo.getInstance(),
    #     )
    #     self.next.connettiEventi()
    #     self.next.showView()
    #     self.closeView()

    # def __onOperaClicked(self) -> None:
    #     self.__gotoVistaOpera()

    def __renderizzaOpere(self) -> list[ControllerWidgetOpera]:
        tipo_ricerca = self.view.getTipoRicercaComboBox().currentText().lower()
        parametro_ricerca = self.view.getParametroRicercaLineEdit().text()
        matches = {
            'autore': lambda opera: parametro_ricerca.lower() in opera.autore.lower(),
            'nome': lambda opera: parametro_ricerca.lower() in opera.nome.lower(),
            'periodo': lambda opera: parametro_ricerca.lower() in opera.periodo.name.lower(),
            'tipo': lambda opera: parametro_ricerca.lower() in opera.composizione.tipo_opera.name.lower(),
        }
        opere_filtrate = filter(matches[tipo_ricerca], self.model.opere)
        result = []

        for opera in opere_filtrate:
            new_widget = WidgetOpera(self.view.scrollAreaWidgetContents)
            result.append(ControllerWidgetOpera(
                view=new_widget,
                model=opera,
                parent=self,
            ))
        return result

    def initializeUi(self) -> None:
        self.opere_trovate = self.__renderizzaOpere()

        # rimuovo tutti i widget
        for i in reversed(range(self.view.risultatiGridLayout.count())):
            self.view.risultatiGridLayout.itemAt(i).widget().setParent(None)

        c = 0
        for widget_opera in self.opere_trovate:
            self.view.risultatiGridLayout.addWidget(widget_opera.view, c // 3, c % 3)
            c += 1

    def connettiEventi(self) -> None:
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.__gotoPrevious()
        self.view.getRicercaButton().clicked.connect(self.__onRicercaClicked)
