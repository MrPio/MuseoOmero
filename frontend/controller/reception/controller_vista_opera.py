#######################################################
# 
# ControllerVistaOpera.py
# Python implementation of the Class ControllerVistaOpera
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
# 
#######################################################
import os
import tempfile
import time
from tkinter import filedialog
from types import NoneType

from PIL import Image
from PIL.ImageQt import QPixmap
from PyQt5.QtGui import QImage
from tkinterDnD import tk

from backend.high_level.gestione_interna.opera import Opera
from backend.high_level.gestione_interna.ubicazione import Ubicazione
from backend.high_level.museo import Museo
from frontend.controller.controller import Controller
from frontend.controller.controller_yes_no import ControllerYesNo
from frontend.controller.reception.controller_inserici_ubicazione import ControllerInsericiUbicazione
from frontend.view.reception.vista_inserici_ubicazione import VistaInsericiUbicazione
from frontend.view.reception.vista_opera import VistaOpera
from frontend.view.vista_yes_no import VistaYesNo


class ControllerVistaOpera(Controller):

    def __gotoPrevious(self) -> None:
        self.closeView()
        self.previous.initializeUi()
        self.previous.enableView()

    def __init__(self, view: VistaOpera, previous: Controller, model: Opera, eliminabile: bool = True):
        super().__init__(view)
        self.view: VistaOpera = view
        self.previous = previous
        self.model = model
        self.eliminabile = eliminabile

        self.previous.disableView()
        self.connettiEventi()
        self.initializeUi()
        self.showView()

    def __onCambiaUbicazioneClicked(self) -> None:
        if self.model.ubicazione is None:
            self.model.ubicazione = Ubicazione()
        self.next = ControllerInsericiUbicazione(
            view=VistaInsericiUbicazione(),
            previous=self,
            model=self.model.ubicazione,
        )

    def __onEliminaClicked(self):
        def elimina():
            Museo.getInstance().opere.remove(self.model)
            # self.previous.initializeUi()
            self.__gotoPrevious()

        self.next = ControllerYesNo(VistaYesNo(), self, elimina)

    def __startTimer(self):
        self.hold_start = time.time_ns()

    def connettiEventi(self) -> None:
        super().connettiEventi()
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.__gotoPrevious()
        self.view.getEliminaButton().clicked.connect(self.__onEliminaClicked)
        self.view.getCambiaUbicazioneButton().clicked.connect(self.__onCambiaUbicazioneClicked)

        self.view.getImmagineLabel().dragEnterEvent = lambda e: e.accept() if e.mimeData().hasUrls else e.ingore()
        self.view.getImmagineLabel().dropEvent = lambda e: self.__onDropFile(e)
        self.view.getImmagineLabel().mousePressEvent = lambda _: self.__startTimer()
        self.view.getImmagineLabel().mouseReleaseEvent = lambda _: self.__onDropZoneClicked()

    def initializeUi(self) -> None:
        if not self.eliminabile:
            self.view.getEliminaButton().setVisible(False)
            self.view.setMaximumHeight(self.view.height() - 80)
        self.view.getTitoloLabel().setText(self.model.titolo)
        self.view.getAutoreLabel().setText(self.model.autore)

        if self.model.composizione is not None:
            self.view.getDimensioniLabel().setText('{} x {} x {} cm'.format(
                self.model.composizione.altezza_cm, self.model.composizione.larghezza_cm,
                self.model.composizione.profondita_cm))

        self.view.getPeriodoLabel().setText(self.model.periodo.name.lower())
        if type(self.model.ubicazione) is not NoneType:
            self.view.getUbicazioneLabel().setText('piano {}/n.mag {}/scf {}/pos {}'.format(
                self.model.ubicazione.piano, self.model.ubicazione.numero_magazzino,
                self.model.ubicazione.scaffale, self.model.ubicazione.posizione))
        else:
            self.view.getUbicazioneLabel().setText('Non specificato')

        if type(self.model.immagine) is not NoneType:
            try:
                image = QImage(self.model.immagine.tobytes('raw', 'RGBA'), self.model.immagine.size[0],
                               self.model.immagine.size[1], QImage.Format_RGBA8888)
                self.view.getImmagineLabel().setPixmap(QPixmap.fromImage(image))
                self.view.getImmagineLabel().setMargin(10)
                new_width = image.width() / image.height() * self.view.getImmagineLabel().maximumHeight()
                self.view.getImmagineLabel().setMaximumWidth(int(new_width))
                self.view.getImmagineLabel().setGeometry(int(245 - new_width / 2), 534, int(new_width), 181)

            except Exception as e:
                print(e)

        self.view.getCostoLabel().setText(str(self.model.costo))
        self.view.getImmagineLabel().setAcceptDrops(True)

    def __onDropFile(self, event):
        if len(event.mimeData().urls()) > 0:
            path = event.mimeData().urls()[0].toLocalFile()
            if any(extension in path.lower() for extension in ['.ico', '.png', '.jpg', '.bmp']):
                self.model.immagine = Image.open(path).convert("RGBA")
                self.previous.initializeUi()
                self.initializeUi()

    def __onDropZoneClicked(self) -> None:
        if self.model.immagine is not None and time.time_ns() - self.hold_start > 200 * 1000000:
            path = tempfile.gettempdir() + '/photo.jpg'
            self.model.immagine.convert('RGB').save(path)
            os.startfile(path)
        else:
            root = tk.Tk()
            root.withdraw()
            path = filedialog.askopenfilename()
            if any(extension in path.lower() for extension in ['.ico', '.png', '.jpg', '.bmp']):
                self.model.immagine = Image.open(path).convert("RGBA")
                self.initializeUi()
