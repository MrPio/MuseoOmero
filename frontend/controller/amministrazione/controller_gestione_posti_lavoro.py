#######################################################
# 
# ControllerGestionePostiLavoro.py
# Python implementation of the Class ControllerGestionePostiLavoro
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
# 
#######################################################

from PyQt5.QtGui import QPixmap

from backend.high_level.museo import Museo
from backend.high_level.personale.amministrazione import Amministrazione
from backend.high_level.personale.reception import Reception
from backend.high_level.personale.segreteria import Segreteria
from frontend.controller.amministrazione.controller_modifica_posto_lavoro import ControllerModificaPostoLavoro
from frontend.controller.amministrazione.widget.controller_widget_aggiungi_alla_lista import \
    ControllerWidgetAggiungiAllaLista
from frontend.controller.amministrazione.widget.controller_widget_posto_lavoro import ControllerWidgetPostoLavoro
from frontend.controller.amministrazione.widget.strategy_aggiungi_alla_lista.aggiungi_posto_lavoro import \
    AggiungiPostoLavoro
from frontend.controller.amministrazione.widget.strategy_widget_dipendente.strategy_widget_gestisci_posto import \
    StrategyWidgetGestisciPosto
from frontend.controller.controller import Controller
from frontend.view.amministrazione.vista_gestione_posti_lavoro import VistaGestionePostiLavoro

from frontend.view.amministrazione.vista_modifica_posto_lavoro import VistaModificaPostoLavoro
from frontend.view.amministrazione.widget.widget_aggiungi_alla_lista import WidgetAggiungiAllaLista
from frontend.view.amministrazione.widget.widget_posto_lavoro import WidgetPostoLavoro


class ControllerGestionePostiLavoro(Controller):

    def __gotoPrevious(self) -> None:
        self.closeView()
        self.previous.enableView()

    def __init__(self, view: VistaGestionePostiLavoro, previous: Controller, model: Museo):
        super().__init__(view)
        self.view: VistaGestionePostiLavoro = view
        self.previous = previous
        self.model = model
        self.initializeUi()

    #    TODO usare il widget aggiungi alla lista
    """    def gotoVistaModificaPostoLavoro(self) -> None:
        controller = ControllerModificaPostoLavoro(
            view=VistaModificaPostoLavoro(),
            previous=self,
            model=self.model.posti_lavoro
        )
        controller.connettiEventi()
        controller.showView()
        self.disableView()"""

    def connettiEventi(self) -> None:
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.__gotoPrevious()

    def __renderizzaPostiLavoro(self) -> list[ControllerWidgetPostoLavoro]:
        result = []
        for posto_lavoro in self.model.posti_lavoro:
            matches = {
                Reception: self.view.getReceptionsListView(),
                Segreteria: self.view.getSegreterieListView(),
                Amministrazione: self.view.getAmministrazioniListView(),
            }
            new_widget = WidgetPostoLavoro(matches[type(posto_lavoro)])

            result.append(ControllerWidgetPostoLavoro(
                view=new_widget,
                model=posto_lavoro,
                parent=self,
                strategy=StrategyWidgetGestisciPosto(),
            ))
        return result

    def initializeUi(self) -> None:
        self.posti_lavoro = self.__renderizzaPostiLavoro()
        matches = {
            Reception: self.view.verticalLayout,
            Segreteria: self.view.verticalLayout_2,
            Amministrazione: self.view.verticalLayout_3,
        }
        # rimuovo tutti i widget
        for layout in [self.view.verticalLayout, self.view.verticalLayout_2, self.view.verticalLayout_3]:
            for i in reversed(range(layout.count())):
                layout.itemAt(i).widget().setParent(None)

        for controller in self.posti_lavoro:
            matches[type(controller.model)].addWidget(controller.view)

        for layout in [self.view.verticalLayout, self.view.verticalLayout_2, self.view.verticalLayout_3]:
            matches = {
                self.view.verticalLayout: [Reception, self.view.getReceptionsListView()],
                self.view.verticalLayout_2: [Segreteria, self.view.getSegreterieListView()],
                self.view.verticalLayout_3: [Amministrazione, self.view.getAmministrazioniListView()],
            }
            new_widget = WidgetAggiungiAllaLista(matches[layout][1])

            controller=ControllerWidgetAggiungiAllaLista(
                view=new_widget,
                parent=self,
                strategy=AggiungiPostoLavoro(self),
                tipo=matches[layout][0].__name__.lower(),
            )
            layout.addWidget(controller.view)
