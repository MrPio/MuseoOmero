#######################################################
# 
# ControllerLogin.py
# Python implementation of the Class ControllerLogin
# Generated by Enterprise Architect
# Created on:      07-ott-2022 17:39:59
# Original author: ValerioMorelli
# 
#######################################################
# from backend.high_level.museo import Museo
# from backend.high_level.personale.dipendente import Dipendente
from backend.high_level.museo import Museo
from backend.high_level.personale.amministratore import Amministratore
from backend.high_level.personale.dipendente import Dipendente
from backend.high_level.personale.operatore_al_pubblico import OperatoreAlPubblico
from backend.high_level.personale.segretario import Segretario
from frontend.controller.amministrazione.controller_home_amministrazione import ControllerHomeAmministrazione
from frontend.controller.controller import Controller
from frontend.controller.reception.controller_home_reception import ControllerHomeReception
from frontend.controller.segreteria.controller_home_segreteria import ControllerHomeSegreteria
from frontend.view.amministrazione.vista_home_amministrazione import VistaHomeAmministrazione
from frontend.view.reception.vista_home_reception import VistaHomeReception
from frontend.view.segreteria.vista_home_segreteria import VistaHomeSegreteria
from frontend.view.vista_login import VistaLogin


class ControllerLogin(Controller):
    def __init__(self, view: VistaLogin, model: Museo, home: Controller, repartoScelto: str):
        super().__init__(view)
        self.view: VistaLogin = view
        self.__model = model
        self.__home = home
        self.__repartoScelto = repartoScelto
        self.view.getErrorLabel().setVisible(False)
        self.__home.enableView()

    def __login(self, username: str, password: str) -> Dipendente:
        return self.__model.login(
            username=username,
            password=password,
        )

    def __onLoginClicked(self) -> None:
        username = self.view.getUsernameLineEdit().text()
        password = self.view.getPasswordLineEdit().text()

        dipendente = self.__login(
            username=username,
            password=password,
        )
        if dipendente is None:
            self.view.getErrorLabel().setText(
                'Compila correttamente i campi' if len(username) < 1 or len(
                    password) < 1 else 'Username o password errati!')
            self.view.getErrorLabel().setVisible(True)
            return
        if dipendente.lavoro is None:
            self.view.getErrorLabel().setText(f'{dipendente.nome} non ha un lavoro.')
            self.view.getErrorLabel().setVisible(True)
            return

        map = {
            OperatoreAlPubblico: ControllerHomeReception(VistaHomeReception(), self.__home, dipendente),
            Segretario: ControllerHomeSegreteria(VistaHomeSegreteria(), self.__home, dipendente),
            Amministratore: ControllerHomeAmministrazione(VistaHomeAmministrazione(), self.__home, dipendente),
        }
        controller: Controller = map[type(dipendente.lavoro)]

        controller.connettiEventi()
        controller.showView()
        self.closeView()
        self.__home.enableView().closeView()

    def connettiEventi(self) -> None:
        self.view.getPreviousButton().mouseReleaseEvent = lambda _: self.gotoHome()
        self.view.getLoginButton().clicked.connect(self.__onLoginClicked)

    def gotoHome(self) -> None:
        self.closeView()
